---

  - apt: update_cache=yes

  - name: ensures that the required packages are present
    apt: name={{ item }} state=latest
    with_items:
      - mysql-client
      - python-pip
      - python-dev
      - libmysqlclient-dev
      - git
      - supervisor

  - name: Ensures pyxis-api-django repository is cloned
    git: repo={{ repo }} dest={{ home }}/{{ repo_name }} force=yes

  - name: Ensures the correct host is set for mysql configuration
    replace: dest={{ django_settings }}
             regexp="192\.168\.33\.42"
             replace="{{ item.host }}"
    with_items: "{{ mysql }}"

  - name: Ensures the correct database name is set for mysql configuration
    replace: dest={{ django_settings }}
             regexp="sandbox"
             replace="{{ item.name }}"
    with_items: "{{ mysql }}"

  - name: Ensures the correct database user is set for mysql configuration
    replace: dest={{ django_settings }}
             regexp="dashboard"
             replace="{{ item.user }}"
    with_items: "{{ mysql }}"

  - name: Ensures the correct database password is set for mysql configuration
    replace: dest={{ django_settings }}
             regexp="password"
             replace="{{ item.password }}"
    with_items: "{{ mysql }}"

  - name: Ensures requirements.txt is installed
    shell: "pip install -r requirements.txt"
    register: pip_install_command
    args:
      chdir: "{{ home }}/{{ repo_name }}/"
    failed_when: pip_install_command.rc != 0

  - name: Ensures supervisor configuration is present
    copy: src=pyxis_api.conf dest={{ supervisor_config }}

  - name: Ensures supervisor configuration points to the correct project directory
    replace: dest={{ supervisor_config }}
             regexp="<django_project_root>"
             replace="{{ django_project_root }}"

  - name: Ensures supervisor configuration has the correct project name
    replace: dest={{ supervisor_config }}
             regexp="<django_project_name>"
             replace="{{ django_project_name }}"

  - name: Ensures supervisor configuration serves the app in the correct port
    replace: dest={{ supervisor_config }}
             regexp="<supervisor_port>"
             replace="{{ supervisor_port }}"

  - name: Ensures supervisor configuration has the correct user
    replace: dest={{ supervisor_config }}
             regexp="<supervisor_user>"
             replace="{{ user }}"

  - name: Ensures supervisor log path has the correct path
    replace: dest={{ supervisor_config }}
             regexp="<supervisor_log_path>"
             replace="{{ supervisor_log_path }}"

  - name: Ensures supervisor log directory exists
    file: path={{ supervisor_log_path }} state=directory
    sudo: no

  - name: Ensures supervisor is configured
    supervisorctl: name=pyxis_api state=present

  - name: Ensures web application is served
    supervisorctl: name=pyxis_api state=restarted
